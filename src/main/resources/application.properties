# This will take in value from the command line for port.If value is not assigned default is 0
server.port=${PORT:0}
spring.application.name=users-ws
eureka.client.service-url.defaultZone = http://localhost:8010/eureka
#spring.devtools.restart.enabled=true
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
#spring.h2.console.enabled=true
# h2 has inbuilt firewall. since our appliations will be accessible via api gateway
#spring.h2.console.settings.web-allow-others=true

spring.datasource.url=jdbc:mysql://localhost:3306/users_microservice?useSSL=false&serverTimezone=UTC
spring.datasource.username=crawlerp
spring.datasource.password=Manu4life@1
spring.jpa.hibernate.ddl-auto=update

##
info.app.name=Spring Users Api - From local properties
info.app.description=Spring Users Api - From local properties
info.app.version=1.0.0
# use wildcards * to expose all endpoints
# or use  comma delimite dlist
#Actuator properties
management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.include=health,info,beans
management.endpoints.web.base-path=/actuator
## custom properties to be passed to application


## boot strap properties. Innewer versions instead of a creating a bootsrap.properties
## we can add it to application.properties
spring.config.import=optional:configserver:http://localhost:8012
# This is to override if our application name doesnt match the properties file read by config server
# or if we want to use a different config file
spring.cloud.config.name=users
#spring.cloud.config.uri=http://localhost:8012
#If the below is not set then the default profile is set.
#With the above and below parameters set the application is going to look for users-pro.properties
# we can pass this from command line in different environments
#spring.profiles.active=pro


